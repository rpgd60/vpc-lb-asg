### ------------ Resources - Load Balancer Auto Scaling Group and associated Web Servers (launch template) ----------------    
## Load Balancer Auto Scaling Group and Launch Template (and related security groups)


Parameters:
  Project:
    Description: Project Name prefixed to resource names
    Type: String
    Default: "acme999"

  AppName:
    Description:  Application Name - used for Resource Groups etc.
    Type: String
    Default: "app1"

  Environment:
    Description: Environment name (e.g. dev, test, prod)
    Type: String
    Default: "dev"

  NetworkStackName:
    Description: >-
      Name of an active CloudFormation stack that contains the networking
      resources, such as the VPC and subnet that will be used in this stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    # Default: base-network



  ## Web Server - Launch Template
  WebAmiId:
    Description: AMI ID for web servers
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    # Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2

  WebInstanceType:
    Description: Instance type for web servers
    Type: String
    AllowedValues:
      - t2.micro
      - t2.nano
    Default: t2.micro


  EnableAutoScalingTargetTracking:
    Description: "Enable AutoScaling Target Tracking Policies: Average CPU and LB Requests"
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

  MinSizeDefault:
    Description: Minimum size of autoscaling group
    Type: String
    Default: "2"
  DesiredCapacityDefault:
    Description: Desired size of autoscaling group
    Type: String
    Default: "2"  
  MaxSizeDefault:
    Description: Maximum size of autoscaling group
    Type: String
    Default: "6"      

  HTTPRangeAllow:
    Description: The IP address range that can be used to connect to LB via HTTP/S
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  RoleForSsm:
    Description: Role to enable SSM
    Type: String
    Default: EC2RoleForSSM

Conditions: 
  AutoScalingTargetTrackingCondition: !Equals [!Ref 'EnableAutoScalingTargetTracking', 'true']


Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-lb-sg 
      GroupDescription: Security Group for Load Balancer
      VpcId: 
        Fn::ImportValue:
          !Sub ${NetworkStackName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref HTTPRangeAllow
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref HTTPRangeAllow
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-lb-sg    

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Project}-${Environment}-web-sg
      GroupDescription: "Security Group for web servers"
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkStackName}-VPCID
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-web-sg

  WebInboundRuleHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow HTTP from Load Balancer (sg)
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  
  WebInboundRuleHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow HTTPS from Load Balancer (sg)
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  WebInboundRuleBastionSSH:
    Type: AWS::EC2::SecurityGroupIngress
    # Condition: WebFromBastion
    Properties:
      Description: Allow SSH from Bastion Hosts (sg)
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: 
        Fn::ImportValue:
          !Sub ${NetworkStackName}-BastionSecurityGroup

  WebInboundRuleBastionICMP:
    Type: AWS::EC2::SecurityGroupIngress
    # Condition: WebFromBastion   
    Properties:
      Description: Allow ICMP from Bastion Hosts (sg)
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: 
        Fn::ImportValue:
          !Sub ${NetworkStackName}-BastionSecurityGroup

  WebTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10  # def 30
      HealthCheckPath: "/"
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckTimeoutSeconds: 5    # def 5 for HTTP
      HealthyThresholdCount: 2        # def 5 for HTTP, HTTPS
      # IpAddressType: "String"       # Not currently supported by CloudFormation
      Matcher: 
        HttpCode: "200"
      #   GrpcCode: "String"
      Name: !Sub ${Environment}-webtg1
      Port: 80
      Protocol: "HTTP"
      # ProtocolVersion: "String"
      TargetGroupAttributes: 
        - 
          Key: "stickiness.enabled"
          Value: "false"
        - 
          Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        # - 
        #   Key: "stickiness.type"
        #   Value: "lb_cookie"
        # - 
        #   Key: "stickiness.lb_cookie.duration_seconds"
        #   Value: "86400"
        - 
          Key: "slow_start.duration_seconds"
          Value: "0"
        - 
          Key: "load_balancing.algorithm.type"
          Value: "round_robin"    # (default) alternative : least_outstanding_requests
      # TargetType: "String"
      # Targets:
      #   Targets
      UnhealthyThresholdCount: 2    # def 2 for HTTP
      VpcId: 
        Fn::ImportValue:
          !Sub ${NetworkStackName}-VPCID
      Tags:
        - Key: environment
          Value: !Sub ${Environment}
        - Key: Name
          Value: !Sub ${Project}-${Environment}-webtg1


  WebLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
        Name: !Sub ${Environment}-alb
        Scheme: "internet-facing"
        Type: "application"
        Subnets: 
        - Fn::ImportValue:
            !Sub ${NetworkStackName}-PublicSubnet1
        - Fn::ImportValue:
            !Sub ${NetworkStackName}-PublicSubnet2
        SecurityGroups: 
          - !Ref LoadBalancerSecurityGroup
        IpAddressType: "ipv4"
        LoadBalancerAttributes: 
          - 
            Key: "access_logs.s3.enabled"
            Value: "false"
          - 
            Key: "idle_timeout.timeout_seconds"
            Value: "60"
          - 
            Key: "deletion_protection.enabled"
            Value: "false"
          - 
            Key: "routing.http2.enabled"
            Value: "true"
          - 
            Key: "routing.http.drop_invalid_header_fields.enabled"
            Value: "false"
        Tags:
          - Key: environment
            Value: !Sub ${Environment}
          - Key: Name
            Value: !Sub ${Project}-${Environment}-alb

  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref WebLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref WebTargetGroup1


  WebLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    # DependsOn: [NatGateway1, NatGateway2]  # For user-data : for the time being requires outgoing internet access. TODO - baked AMI
    Properties:
      LaunchTemplateName: !Sub ${Environment}-web-server
      LaunchTemplateData:
        ## Gotcha : see https://stackoverflow.com/questions/53854184/cloudformation-launchtemplate-referencing-iaminstanceprofile-fails-to-create#54292081
        IamInstanceProfile: 
          Name: !Ref ServerInstanceProfile
          # Arn: !GetAtt WebInstanceProfileForSsm.Arn
        DisableApiTermination: false
        ImageId: !Ref WebAmiId
        InstanceType: !Ref WebInstanceType
        # KeyName: !Ref WebKeyName
        SecurityGroupIds: [!Ref WebServerSecurityGroup]
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              yum update -y
              yum install -y httpd
              systemctl start httpd
              systemctl enable httpd
              echo "Cfn Stack: ${AWS::StackName} - Host: $(hostname -f)" > /var/www/html/index.html
      # TODO - FIX BELOW
        TagSpecifications:  
          - 
            ResourceType: instance
            Tags:
            - Key: Name
              Value: !Sub ${Project}-${Environment}-${AppName}
            - Key: disposable
              Value: 'false'
            - Key: app
              Value: !Ref AppName   

  WebInstanceProfileForSsm:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub '${Environment}-ssm'
      Path: /
      Roles: [!Ref RoleForSsm] 

  ## Resource - AutoScaling and Target Tracking

  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Sub ${Environment}-webasg
      # CapacityRebalance: Boolean
      # Context: String
      Cooldown: "120"   # def 300?
      MinSize: !Ref MinSizeDefault
      DesiredCapacity: !Ref DesiredCapacityDefault
      MaxSize:  !Ref MaxSizeDefault
      HealthCheckGracePeriod: 120 ## Default 300 from console,  0 from SDK and CLI
      HealthCheckType: "ELB"
      LaunchTemplate: 
          LaunchTemplateId: !Ref WebLaunchTemplate
          Version: !GetAtt WebLaunchTemplate.LatestVersionNumber
      NewInstancesProtectedFromScaleIn: false
      TargetGroupARNs: [ !Ref WebTargetGroup1 ]
      VPCZoneIdentifier: 
        - Fn::ImportValue:
            !Sub ${NetworkStackName}-PrivateSubnet1
        - Fn::ImportValue:
            !Sub ${NetworkStackName}-PrivateSubnet2
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupDesiredCapacity
            - GroupInServiceInstances
            - GroupPendingInstances
            - GroupStandbyInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
            - GroupInServiceCapacity
            - GroupPendingCapacity
            - GroupStandbyCapacity
            - GroupTerminatingCapacity
            - GroupTotalCapacity
      Tags: 
        - Key: environment
          Value: !Sub ${Environment}
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub ${Environment}-webasg
          PropagateAtLaunch: true
            # Fn::GetAtt : [ "WebLaunchTemplate", "LatestVersionNumber" ]

  WebTargetTrackingCpu:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: AutoScalingTargetTrackingCondition
    Properties: 
      PolicyType: TargetTrackingScaling
      AutoScalingGroupName: !Ref WebAutoScalingGroup  
      TargetTrackingConfiguration: 
        DisableScaleIn: true
        PredefinedMetricSpecification: 
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50

# Temporarily disabled - 
  # WebTargetTrackingLoadBalancerRequests:
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   Condition: AutoScalingTargetTrackingCondition
  #   Properties: 
  #     PolicyType: TargetTrackingScaling
  #     AutoScalingGroupName: !Ref WebAutoScalingGroup  
  #     TargetTrackingConfiguration: 
  #       DisableScaleIn: false
  #       PredefinedMetricSpecification: 
  #         PredefinedMetricType: ALBRequestCountPerTarget
  #         ResourceLabel:  !Join 
  #           - '/' 
  #           - - !GetAtt WebLoadBalancer.LoadBalancerFullName
  #             - !GetAtt WebTargetGroup1.TargetGroupFullName
  #       TargetValue: 100  


  WebScheduledActionOut: 
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref WebAutoScalingGroup
      MaxSize: 8
      DesiredCapacity: 6 
      MinSize: 2
      Recurrence: "40 12 * * *"
      TimeZone: Europe/Madrid
  WebScheduledActionIn: 
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref WebAutoScalingGroup
      MinSize: !Ref MinSizeDefault
      DesiredCapacity: !Ref DesiredCapacityDefault
      MaxSize: !Ref MaxSizeDefault
      Recurrence: "0 13 * * *"
      TimeZone: Europe/Madrid

  ServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [NP1, Ref: "AWS::StackName", "SSMRole"]]
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  ServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ServerRole

Outputs:   
  LoadBalancerUrl:
    Value:  !Sub "http://${WebLoadBalancer.DNSName}/" 
  LoadBalancerFullName:
    Value: !GetAtt WebLoadBalancer.LoadBalancerFullName