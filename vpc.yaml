AWSTemplateFormatVersion: 2010-09-09

Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets.  
  Optionally deploys
  - 2 NAT Gateways - one per AZ
  - Bastion Host in Public subnets 


Parameters:

  Project:
    Description: Project Name prefixed to resource names
    Type: String
    Default: "acme999"

  Environment:
    Description: Environment name (e.g. dev, test, prod)
    Type: String
    Default: "dev"

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.200.0.0/16

  CreateNatGateways:
    Description: Whether to create NAT GW or not
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"



  ##  Bastion Host 

  CreateBastion:
    Description: Whether to create an Bastion (Jump) host in public subnet
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"    
  BastionAmiId:
    Description: AMI ID for bastion hosts
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    # Newer Linux Kernel 5.x
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2
    # Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs  # yields ami-053f95332f3cdcbf3 for eu-west-1 (october 1, 2021)
    # TODO - explore if / how latest
    # Type: AWS::EC2::Image::Id
    # Default: ami-0d1bf5b68307103c2 
  
  BastionInstanceType:
    Description: Instance type for web Bastion hosts
    Type: String
    AllowedValues:
      - t2.micro
      - t2.nano
    Default: t2.micro

  BastionKeyName:
    Description:  Key pair name for Bastion Host
    Type: AWS::EC2::KeyPair::KeyName
    Default: "mkeyireland1"

  BastionSSHRangeAllow:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


### ---------------------------- Metadata ------------------
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "VPC and Networking Configuration"
        Parameters: 
          - Project
          - Environment
          - VpcCIDR
          - CreateNatGateways
      - 
        Label: 
          default: "Bastion Host in Public Subnet"
        Parameters: 
          - CreateBastion
          - BastionAmiId
          - BastionInstanceType
          - BastionSSHRangeAllow
          - BastionKeyName
### ---------------------------- Conditions ----------------

Conditions:
  NatGatewaysCondition: !Equals [!Ref 'CreateNatGateways', 'true']
  BastionCondition: !Equals [!Ref 'CreateBastion', 'true']

### ---------------------------- Resources - VPC ----------------    
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Project

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-pub1
          
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-pub2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt VPC.CidrBlock, 128, 9 ]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-priv1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Select [ 6, !Cidr [ !GetAtt VPC.CidrBlock, 128, 9 ]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-priv2

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Condition: NatGatewaysCondition
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Condition: NatGatewaysCondition
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Condition: NatGatewaysCondition
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-NGW1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: NatGatewaysCondition
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-NGW2
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-pub

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-priv1

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Condition: NatGatewaysCondition
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-priv2

  DefaultPrivateRoute2OneNat:
    Type: AWS::EC2::Route
    Condition: NatGatewaysCondition
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

### ---------------------------- Resources - Bastion Host in Public Subnet 1 ----------------

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
#    Condition: NONE - for the time being create bastion sg even if bastion host not created 
    Properties:
      # GroupName: "bastion-sg" - problems when doing stack update
      GroupDescription: "Security Group for Bastion Host"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref BastionSSHRangeAllow
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-bastion-sg  

  BastionHost:
    Type: AWS::EC2::Instance
    Condition: BastionCondition
    Properties:
      DisableApiTermination: false
      # IamInstanceProfile: "String"
      ImageId: !Ref BastionAmiId
      InstanceType: !Ref BastionInstanceType
      KeyName: !Ref BastionKeyName
      SecurityGroupIds: [!Ref BastionSecurityGroup ]
      SourceDestCheck: true
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-bastion     
          

# ----------------- server security group -------------
  HttpSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      # GroupName: "http-sg"   -- problems when doing stack updates
      GroupDescription: "Simple security Group for test server in private subnet"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-http-sg 

  

# -------------------------------Outputs ----------------
Outputs:

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCID

  PublicSubnet1Id:
    Description: Public Subnet 1 Id
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2Id:
    Description: Public Subnet 2 Id
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2'

  PrivateSubnet1Id:
    Description: Private Subnet 1 Id
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1'

  PrivateSubnet2Id:
    Description: Private Subnet 2 Id
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2'

  BastionPublicIp:
    Condition:  BastionCondition
    Value: !GetAtt BastionHost.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-BastionPublicIp'

  BastionPublicDns:
    Condition: BastionCondition
    Value:  !GetAtt BastionHost.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-BastionPublicDnsName'
    
  BastionInstanceId:
    Condition: BastionCondition
    Value: !Ref BastionHost
    Export:
      Name: !Sub '${AWS::StackName}-BastionInstanceId'

  
  BastionSecurityGroup:
    # Condition: BastionCondition
    Value: !Ref BastionSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-BastionSecurityGroup'

  HttpSecurityGroup:
    Value: !Ref HttpSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-HttpSecurityGroup'




